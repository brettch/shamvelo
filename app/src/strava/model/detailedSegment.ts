/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { PolylineMap } from './polylineMap';
import { SummaryPRSegmentEffort } from './summaryPRSegmentEffort';
import { SummarySegmentEffort } from './summarySegmentEffort';

export class DetailedSegment {
    /**
    * The unique identifier of this segment
    */
    'id'?: number;
    /**
    * The name of this segment
    */
    'name'?: string;
    'activityType'?: DetailedSegment.ActivityTypeEnum;
    /**
    * The segment\'s distance, in meters
    */
    'distance'?: number;
    /**
    * The segment\'s average grade, in percents
    */
    'averageGrade'?: number;
    /**
    * The segments\'s maximum grade, in percents
    */
    'maximumGrade'?: number;
    /**
    * The segments\'s highest elevation, in meters
    */
    'elevationHigh'?: number;
    /**
    * The segments\'s lowest elevation, in meters
    */
    'elevationLow'?: number;
    /**
    * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    */
    'startLatlng'?: Array<number>;
    /**
    * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    */
    'endLatlng'?: Array<number>;
    /**
    * The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.
    */
    'climbCategory'?: number;
    /**
    * The segments\'s city.
    */
    'city'?: string;
    /**
    * The segments\'s state or geographical region.
    */
    'state'?: string;
    /**
    * The segment\'s country.
    */
    'country'?: string;
    /**
    * Whether this segment is private.
    */
    '_private'?: boolean;
    'athletePrEffort'?: SummaryPRSegmentEffort;
    'athleteSegmentStats'?: SummarySegmentEffort;
    /**
    * The time at which the segment was created.
    */
    'createdAt'?: Date;
    /**
    * The time at which the segment was last updated.
    */
    'updatedAt'?: Date;
    /**
    * The segment\'s total elevation gain.
    */
    'totalElevationGain'?: number;
    'map'?: PolylineMap;
    /**
    * The total number of efforts for this segment
    */
    'effortCount'?: number;
    /**
    * The number of unique athletes who have an effort for this segment
    */
    'athleteCount'?: number;
    /**
    * Whether this segment is considered hazardous
    */
    'hazardous'?: boolean;
    /**
    * The number of stars for this segment
    */
    'starCount'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "activityType",
            "baseName": "activity_type",
            "type": "DetailedSegment.ActivityTypeEnum"
        },
        {
            "name": "distance",
            "baseName": "distance",
            "type": "number"
        },
        {
            "name": "averageGrade",
            "baseName": "average_grade",
            "type": "number"
        },
        {
            "name": "maximumGrade",
            "baseName": "maximum_grade",
            "type": "number"
        },
        {
            "name": "elevationHigh",
            "baseName": "elevation_high",
            "type": "number"
        },
        {
            "name": "elevationLow",
            "baseName": "elevation_low",
            "type": "number"
        },
        {
            "name": "startLatlng",
            "baseName": "start_latlng",
            "type": "Array<number>"
        },
        {
            "name": "endLatlng",
            "baseName": "end_latlng",
            "type": "Array<number>"
        },
        {
            "name": "climbCategory",
            "baseName": "climb_category",
            "type": "number"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "_private",
            "baseName": "private",
            "type": "boolean"
        },
        {
            "name": "athletePrEffort",
            "baseName": "athlete_pr_effort",
            "type": "SummaryPRSegmentEffort"
        },
        {
            "name": "athleteSegmentStats",
            "baseName": "athlete_segment_stats",
            "type": "SummarySegmentEffort"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "totalElevationGain",
            "baseName": "total_elevation_gain",
            "type": "number"
        },
        {
            "name": "map",
            "baseName": "map",
            "type": "PolylineMap"
        },
        {
            "name": "effortCount",
            "baseName": "effort_count",
            "type": "number"
        },
        {
            "name": "athleteCount",
            "baseName": "athlete_count",
            "type": "number"
        },
        {
            "name": "hazardous",
            "baseName": "hazardous",
            "type": "boolean"
        },
        {
            "name": "starCount",
            "baseName": "star_count",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return DetailedSegment.attributeTypeMap;
    }
}

export namespace DetailedSegment {
    export enum ActivityTypeEnum {
        Ride = <any> 'Ride',
        Run = <any> 'Run'
    }
}
