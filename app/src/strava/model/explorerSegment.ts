/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class ExplorerSegment {
    /**
    * The unique identifier of this segment
    */
    'id'?: number;
    /**
    * The name of this segment
    */
    'name'?: string;
    /**
    * The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3.
    */
    'climbCategory'?: number;
    /**
    * The description for the category of the climb
    */
    'climbCategoryDesc'?: ExplorerSegment.ClimbCategoryDescEnum;
    /**
    * The segment\'s average grade, in percents
    */
    'avgGrade'?: number;
    /**
    * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    */
    'startLatlng'?: Array<number>;
    /**
    * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    */
    'endLatlng'?: Array<number>;
    /**
    * The segments\'s evelation difference, in meters
    */
    'elevDifference'?: number;
    /**
    * The segment\'s distance, in meters
    */
    'distance'?: number;
    /**
    * The polyline of the segment
    */
    'points'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "climbCategory",
            "baseName": "climb_category",
            "type": "number"
        },
        {
            "name": "climbCategoryDesc",
            "baseName": "climb_category_desc",
            "type": "ExplorerSegment.ClimbCategoryDescEnum"
        },
        {
            "name": "avgGrade",
            "baseName": "avg_grade",
            "type": "number"
        },
        {
            "name": "startLatlng",
            "baseName": "start_latlng",
            "type": "Array<number>"
        },
        {
            "name": "endLatlng",
            "baseName": "end_latlng",
            "type": "Array<number>"
        },
        {
            "name": "elevDifference",
            "baseName": "elev_difference",
            "type": "number"
        },
        {
            "name": "distance",
            "baseName": "distance",
            "type": "number"
        },
        {
            "name": "points",
            "baseName": "points",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ExplorerSegment.attributeTypeMap;
    }
}

export namespace ExplorerSegment {
    export enum ClimbCategoryDescEnum {
        Nc = <any> 'NC',
        _4 = <any> '4',
        _3 = <any> '3',
        _2 = <any> '2',
        _1 = <any> '1',
        Hc = <any> 'HC'
    }
}
