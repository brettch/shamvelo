/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AltitudeStream } from './altitudeStream';
import { CadenceStream } from './cadenceStream';
import { DistanceStream } from './distanceStream';
import { HeartrateStream } from './heartrateStream';
import { LatLngStream } from './latLngStream';
import { MovingStream } from './movingStream';
import { PowerStream } from './powerStream';
import { SmoothGradeStream } from './smoothGradeStream';
import { SmoothVelocityStream } from './smoothVelocityStream';
import { TemperatureStream } from './temperatureStream';
import { TimeStream } from './timeStream';

export class StreamSet {
    'time'?: TimeStream;
    'distance'?: DistanceStream;
    'latlng'?: LatLngStream;
    'altitude'?: AltitudeStream;
    'velocitySmooth'?: SmoothVelocityStream;
    'heartrate'?: HeartrateStream;
    'cadence'?: CadenceStream;
    'watts'?: PowerStream;
    'temp'?: TemperatureStream;
    'moving'?: MovingStream;
    'gradeSmooth'?: SmoothGradeStream;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "time",
            "baseName": "time",
            "type": "TimeStream"
        },
        {
            "name": "distance",
            "baseName": "distance",
            "type": "DistanceStream"
        },
        {
            "name": "latlng",
            "baseName": "latlng",
            "type": "LatLngStream"
        },
        {
            "name": "altitude",
            "baseName": "altitude",
            "type": "AltitudeStream"
        },
        {
            "name": "velocitySmooth",
            "baseName": "velocity_smooth",
            "type": "SmoothVelocityStream"
        },
        {
            "name": "heartrate",
            "baseName": "heartrate",
            "type": "HeartrateStream"
        },
        {
            "name": "cadence",
            "baseName": "cadence",
            "type": "CadenceStream"
        },
        {
            "name": "watts",
            "baseName": "watts",
            "type": "PowerStream"
        },
        {
            "name": "temp",
            "baseName": "temp",
            "type": "TemperatureStream"
        },
        {
            "name": "moving",
            "baseName": "moving",
            "type": "MovingStream"
        },
        {
            "name": "gradeSmooth",
            "baseName": "grade_smooth",
            "type": "SmoothGradeStream"
        }    ];

    static getAttributeTypeMap() {
        return StreamSet.attributeTypeMap;
    }
}

